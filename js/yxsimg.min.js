
var yxs;

(function (yxs) {

    var c = (function () {

        function c($scope) {
            var SHA512 = new Hashes.SHA512(), Base64 = new Hashes.Base64();

            $scope.mysrc = "";
            $scope.mysrc_name = "";
            $scope.myfile = "";
            $scope.people = {};

            function myhash() {
                if (!$scope.mypassword) {
                    return "";
                }
                var ret = SHA512.hex($scope.mypassword);
                return ret;
            }


            function showimg() {

                console.log($scope.myxx);
                if (myfile.files.length === 0) {
                    return;
                }
                var xx = myfile.files[0];

                $scope.myfile = xx;
                var fr = new FileReader();
                fr.readAsDataURL(xx);
                fr.onload = function () {
                    var ret = fr.result;
                    $scope.mysrc = ret;
                    $scope.mysrc_name = xx.name;
                };
            }

            $scope.showimg = showimg;
            $scope.initdb = function () {
                var dbversion = 2;
                yxs.s_db.create("yxs", [{ "name": "people", "index": ["age", "firstname", "lastname"] }, { "name": "images", "index": ["name", "type"] }], dbversion);
            };
            $scope.deletedb = function () {
                yxs.s_db.deletedb("yxs");
            };

            $scope.testgetall = function () {
                yxs.s_db.selectall("yxs", "people", function (result) {
                    $scope.people.items = result;
                    $scope.$apply();
                    console.log('getAll() call success. Result:', result);
                });
            };


            function insert(e) {
                if (e) {
                    var dataObj = {
                        lastname: lastnames[Math.floor(Math.random() * 5)],
                        firstname: firstnames[Math.floor(Math.random() * 4)],
                        age: Math.floor(Math.random() * (100 - 20)) + 20,
                        image: e,
                        id: id++
                    }
                    yxs.s_db.insert("yxs", "people", [dataObj]);
                    return true;
                }
                else {
                    return false;
                }
            }

            $scope.clearfile = function () { $scope.myfile = ""; }

            $scope.testadd = function () {
                console.log("add test");

                if (!insert($scope.myfile)) {
                    yxs.s_io.getdataurl("people_image",
                    function (e) {
                        $scope.myfile = e;
                        insert($scope.myfile)
                    });
                }

            };

            $scope.myhash = myhash;
            var lastnames = ['Smith', 'Miller', 'Doe', 'Frankenstein', 'Furter'],
                 firstnames = ['Peter', 'John', 'Frank', 'James'],
                 id = 1;
        }
        return c;
    })();

    yxs.c_db = c;

})(yxs || (yxs = {}));;
var yxs;
(function (yxs) {

    var m = (function () {


        function m() {
            this.namespace = "com.yxs.db"
            this.addnamespace = namespace + ".";
            this.db = null;
            this.ready = false;

            $data.Entity.extend(this.addnamespace + "Todo", {
                Id: { type: "int", key: true, computed: true },
                Task: { type: String, required: true, maxLength: 200 },
                DueDate: { type: Date },
                Completed: { type: Boolean },
                Person: { type: "Person", required: true, inverseProperty: "Todos" }
            });

            $data.Entity.extend(this.addnamespace + "Person", {
                Id: { type: "int", key: true, computed: true },
                Name: { type: String, required: true, maxLength: 200 },
                Todos: { type: Array, elementType: Todo, inverseProperty: "Person" }
            });

            $data.EntityContext.extend(this.addnamespace + "TodoDatabase", {
                Todos: { type: $data.EntitySet, elementType: Todo },
                People: { type: $data.EntitySet, elementType: Person }
            });
        }

        m.prototype.open = function () {
            var _this = this;
            if (_this.ready) {
                return ;
            }

            _this.db = new TodoDatabase({
                provider: 'webSql', databaseName: this.addnamespace + "TodoDatabase"
            });

            db.onReady(function () {
                _this.ready = true;
            });
        };
        return m;
    })();

    yxs.s_db = m;
})(yxs || (yxs = {}));

;
var yxs;
(function (yxs) {

    var s = (function () {

        function s() {

            this.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;
            this.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.OIDBTransaction || window.msIDBTransaction;
            this.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;
            this.dbs = {};
        }

        s.prototype.deletedb = function (dbname) {
            var ret = this.indexedDB.deleteDatabase(dbname);
            console.log(ret);
        };

        s.prototype.create = function (dbname, storename_arr, version) {
            var _this = this;

            var request = indexedDB.open(dbname, version);

            request.onupgradeneeded = function (event) {
                try {
                    _this.dbs[dbname] = event.target.result;
                    var db = _this.dbs[dbname];
                    for (i in storename_arr) {

                        if ((storename = storename_arr[i]["name"])) {
                            var objectStore = db.createObjectStore(storename, { keyPath: "id" });
                            if ((index = storename_arr[i]["index"])) {
                                for (myi in index) {
                                    objectStore.createIndex(index[myi], index[myi], { unique: false });
                                }
                            }
                        }

                    }
                }
                catch (e) {
                    console.log(e);
                }
            };

        };

        s.prototype.insert = function (dbname, storename, objarr) {
            var _this = this;
            var request = indexedDB.open(dbname);

            request.onerror = function (event) {
            };

            request.onsuccess = function (event) {
                _this.dbs[dbname] = event.target.result;

                var db = _this.dbs[dbname];
                var transaction = db.transaction([storename], "readwrite");

                var objectStore = transaction.objectStore(storename);
                for (var i in objarr) {
                    var request = objectStore.add(objarr[i]);
                    request.onsuccess = function (event) {
                        console.log(event);
                    };
                }

            };

        };

        s.prototype.selectall = function (dbname, storename, callback) {
            this.select(dbname, storename, null, 'next', callback);
        }

        s.prototype.select = function (dbname, storename, keyrange, order, callback) {
            var _this = this;
            var request = indexedDB.open(dbname);

            request.onsuccess = function (event) {
                _this.dbs[dbname] = event.target.result;

                var db = _this.dbs[dbname];
                var transaction = db.transaction([storename], "readonly");
                var objectStore = transaction.objectStore(storename);

                var result = [];

                objectStore.openCursor(keyrange, order).onsuccess = function (event) {
                    var cursor = event.target.result;
                    if (cursor) {
                        cursor.continue();
                        console.log(cursor);
                        result[result.length] = cursor.value;
                    }
                    else {
                        if (callback) {
                            callback(result);
                        }
                    }

                };

            };
        }

        return new s();
    })();

    yxs.s_db = s;
})(yxs || (yxs = {}));;

var yxs;
(function (yxs) {

    var s = (function () {

        function s() {

            this.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;
            this.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.OIDBTransaction || window.msIDBTransaction;
            this.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;
            this.dbs = {};
        }

        s.prototype.deletedb = function (dbname) {
            var ret = this.indexedDB.deleteDatabase(dbname);
            console.log(ret);
        };

        s.prototype.create = function (dbname, storename_arr, version) {
            var _this = this;

            var todoDB = new TodoDatabase({
                provider: 'indexedDb', databaseName: dbname
            });

            todoDB.onReady(function () {
                //Work with todoDB now
            });

        };

        s.prototype.insert = function (dbname, storename, objarr) {
            var _this = this;
            var request = indexedDB.open(dbname);

            request.onerror = function (event) {
            };

            request.onsuccess = function (event) {
                _this.dbs[dbname] = event.target.result;

                var db = _this.dbs[dbname];
                var transaction = db.transaction([storename], "readwrite");

                var objectStore = transaction.objectStore(storename);
                for (var i in objarr) {
                    var request = objectStore.add(objarr[i]);
                    request.onsuccess = function (event) {
                        console.log(event);
                    };
                }

            };

        };

        s.prototype.selectall = function (dbname, storename, callback) {
            this.select(dbname, storename, null, 'next', callback);
        }

        s.prototype.select = function (dbname, storename, keyrange, order, callback) {
            var _this = this;
            var request = indexedDB.open(dbname);

            request.onsuccess = function (event) {
                _this.dbs[dbname] = event.target.result;

                var db = _this.dbs[dbname];
                var transaction = db.transaction([storename], "readonly");
                var objectStore = transaction.objectStore(storename);

                var result = [];

                objectStore.openCursor(keyrange, order).onsuccess = function (event) {
                    var cursor = event.target.result;
                    if (cursor) {
                        cursor.continue();
                        console.log(cursor);
                        result[result.length] = cursor.value;
                    }
                    else {
                        if (callback) {
                            callback(result);
                        }
                    }

                };

            };
        }

        return new s();
    })();

    yxs.s_db_jaydata = s;
})(yxs || (yxs = {}));